#include <iostream>
#include <string>
using namespace std;

class binary
{
    string s;

public:
    void read(void);
    void chk_bin(void);
    void ones_complement(void);
    void display(void);
};

void binary ::read(void)
{
    cout << "Read a binary number " << endl;
    cin >> s;
}

void binary ::chk_bin(void)
{
    for (int i = 0; i < s.length(); i++)
    {
        if (s.at(i) != '0' && s.at(i) != '1')
        {
            cout << "Incorrect binary format !" << endl;
            exit(0);
        }
    }
}

void binary ::ones_complement(void)
{
    for (int i = 0; i < s.length(); i++)
    {
        if (s.at(i) == '0')
        {
            s.at(i) = '1';
        }
        else
        {
            s.at(i) = '0';
        }
    }
}

void binary ::display(void)
{
    cout << "Displaying your binary number" << endl;
    for (int i = 0; i < s.length(); i++)
    {
        cout << s.at(i);
    }
    cout << endl;
}
int main()
{
    // OOPs - Classes and Objects

    // C++ --> Initially called --> C with classes by Stroustroup
    // class --> extension of structure in C
    // structures had limitations
    //     - members are public
    //     - no methods
    // classes --> structure + more
    // classes --> can have methods(functions) and properties
    // classes --> can make few members as private and few members as public
    // structures in C++ are typedefed
    // you can declare objects along with class declaration like this:
    /* class Employee{
                //class declaration
            }mrunank, mrunank1, mrunank2; */
    //mrunank.salary = 8 makes no sense if salary is private

    //Nesting of member functions
    binary b;
    b.read();
    b.chk_bin();
    b.display();
    b.ones_complement();
    b.display();
    return 0;
}
