#include <iostream>
using namespace std;

class Base
{
    int data1; //private by default so it cannot be inherited
public:
    int data2;
    void setData();
    int getData1();
    int getData2();
};

void Base ::setData(void)
{
    data1 = 10;
    data2 = 20;
}

int Base ::getData1()
{
    return data1;
}

int Base ::getData2()
{
    return data2;
}

class Derived : public Base
{
    int data3;

public:
    void process();
    void display();
};

void Derived ::process()
{
    data3 = data2 * getData1();
}

void Derived ::display()
{
    cout << "The value of data 1 is " << getData1() << endl;
    cout << "The value of data 2 is " << data2 << endl;
    cout << "The value of data 3 is " << data3 << endl;
}

int main()
{
    Derived d;
    d.setData(); //sets the value of data1 and data2 as 10 and 20
    d.process();
    d.display();
    return 0;
}

// ======================If we derived the class using Private Visibility Mode ========

// #include <iostream>
// using namespace std;

// class Base
// {
//     int data1; //private by default so it cannot be inherited
// public:
//     int data2;
//     void setData();
//     int getData1();
//     int getData2();
// };

// void Base ::setData(void)
// {
//     data1 = 10;
//     data2 = 20;
// }

// int Base ::getData1()
// {
//     return data1;
// }

// int Base ::getData2()
// {
//     return data2;
// }

// class Derived : private Base
// {
//     int data3;

// public:
//     void process();
//     void display();
// };

// void Derived ::process()
// {
//     setData();
//     data3 = data2 * getData1();
// }

// void Derived ::display()
// {
//     cout << "The value of data 1 is " << getData1() << endl;
//     cout << "The value of data 2 is " << data2 << endl;
//     cout << "The value of data 3 is " << data3 << endl;
// }

// int main()
// {
//     Derived d;
//     //d.setData(); //sets the value of data1 and data2 as 10 and 20
//     d.process();
//     d.display();
//     return 0;
// }
